{
  "name": "gulp-tsc",
  "version": "1.1.5",
  "author": {
    "name": "Kota Saito",
    "email": "kotas.nico@gmail.com",
    "url": "https://github.com/kotas"
  },
  "copyright": "2014 Kota Saito",
  "contributors": [
    {
      "name": "Cai Lei",
      "url": "https://github.com/ccll"
    }
  ],
  "description": "TypeScript compiler for gulp.js",
  "license": "MIT",
  "homepage": "https://github.com/kant2002/gulp-tsc/",
  "bugs": {
    "url": "https://github.com/kant2002/gulp-tsc/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kant2002/gulp-tsc.git"
  },
  "main": "index.js",
  "scripts": {
    "mocha": "./node_modules/.bin/mocha",
    "e2e": "./node_modules/.bin/gulp --gulpfile test-e2e/gulpfile.js",
    "test": "npm run mocha && npm run e2e"
  },
  "keywords": [
    "gulpplugin",
    "typescript",
    "gulp",
    "tsc",
    "compile",
    "transpile",
    "compiler"
  ],
  "dependencies": {
    "async": "^1.4.2",
    "through2": "^2.0.0",
    "gulp-util": "^3.0.1",
    "which": "^1.0.5",
    "byline": "^4.1.1",
    "temp": "^0.8.1",
    "vinyl-fs": "^1.0.0",
    "rimraf": "^2.2.6",
    "resolve": "^1.0.0",
    "lodash": "^3.2.0",
    "typescript": "^1.0.1"
  },
  "devDependencies": {
    "del": "^2.0.0",
    "event-stream": "^3.1.0",
    "glob": "^5.0.3",
    "gulp": "^3.8.11",
    "gulp-expect-file": "^0.0.7",
    "mocha": "^2.1.0",
    "run-sequence": "^1.0.2",
    "should": "^7.1.0",
    "sinon": "^1.9.0"
  },
  "optionalDependencies": {
    "typescript": "^1.0.1"
  },
  "readme": "# gulp-tsc [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url]\r\n> TypeScript compiler for gulp 3\r\n\r\n## Usage\r\n\r\nFirst, install `gulp-tsc` as a development dependency:\r\n\r\n```shell\r\nnpm install --save-dev gulp-tsc\r\n```\r\n\r\nThen, add it to your `gulpfile.js`:\r\n\r\n```js\r\nvar typescript = require('gulp-tsc');\r\n\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.ts'])\r\n    .pipe(typescript())\r\n    .pipe(gulp.dest('dest/'))\r\n});\r\n```\r\n\r\n## Supported TSC versions\r\nAll versions starting from 0.9.1, up to 1.6.3.\r\n\r\n## API\r\n\r\n### typescript(options)\r\n\r\n#### options.tscPath\r\nType: `String`\r\nDefault: `null`\r\n\r\nThe path to `tsc` command for compile.\r\n\r\nIf not set, this plugin searches for `tsc` command in the order as described below:\r\n\r\n1. from `typescript` module installed as your project's dependency (i.e. `require(\"typescript\")` on current directory)\r\n2. from PATH of the running shell (using [node-which](https://github.com/isaacs/node-which))\r\n3. from Bundled `typescript` module\r\n\r\n(This search list can be modified by [options.tscSearch](#optionstscsearch))\r\n\r\nSo, if you want to use other version of `tsc` command, you can add any version of `typescript` module to your project's dependecy.\r\n\r\nHowever, this plugin could fail to run the future `tsc` because of incompatible changes of arguments.\r\n\r\n#### options.tscSearch\r\nType: `Array` of `String`\r\nDefault: `['cwd', 'shell', 'bundle']`\r\n\r\nThis option changes how this plugin searches for `tsc` command on your system.\r\n\r\nSee [options.tscPath](#optionstscpath) for details.\r\n\r\n#### options.emitError\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nIf set to true, this plugin emits `error` event on compilation failure, which causes gulp to abort running task.\r\n\r\nSee [Error handling](#error-handling) for details.\r\n\r\n#### options.module\r\nType: `String` (`\"commonjs\"`, `\"amd\"`, `\"system\"` or `\"umd\"`)\r\nDefault: `null` (if `options.target` is `\"ES6\"` or `\"ES2015\"`), or `\"commonjs\"` (otherwise)\r\n\r\nThe `\"system\"` and `\"umd\"` module options available only when using TypeScript 1.5\r\n\r\n`--module` option for `tsc` command.\r\n\r\n#### options.target\r\nType: `String` (`\"ES3\"`, `\"ES5\"`, `\"ES6\"` or `\"ES2015\"`)\r\nDefault: `\"ES3\"`\r\n\r\n`--target` option for `tsc` command.\r\n\r\n#### options.out\r\nType: `String`\r\nDefault: `null`\r\n\r\n`--out` option for `tsc` command, which will be the name of the output file.\r\nexample: out: 'app.js'\r\n\r\n#### options.outDir\r\nType: `String`\r\nDefault: `null`\r\n\r\nA path to the directory where output files are finally going to.\r\n\r\nThis option does not affect the actual output directory for `tsc` command.\r\n\r\nSee [Path modification](#path-modification) for usage of this option.\r\n\r\n#### options.mapRoot\r\nType: `String`\r\nDefault: `null`\r\n\r\n`--mapRoot` option for `tsc` command.\r\n\r\n#### options.sourceRoot\r\nType: `String`\r\nDefault: `null`\r\n\r\n`--sourceRoot` option for `tsc` command.\r\n\r\n#### options.allowbool\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowbool` option for `tsc` command. (version 0.9.1.1)\r\n\r\n#### options.allowimportmodule\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowimportmodule` option for `tsc` command. (version 0.9.1.1)\r\n\r\n#### options.declaration\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--declaration` option for `tsc` command.\r\n\r\nGenerated `.d.ts` file is also piped into the stream.\r\n\r\n**Notice**: If your output files are NOT going to `{working directory}/something/` (to a directory beneath the working directory), you have to tell your output path to gulp-tsc by `outDir` option for correct reference paths. See [Path modification](#path-modification) for details.\r\n\r\n#### options.noEmitOnError\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noImplicitAny` option for `tsc` command.\r\n\r\nDo not emit outputs if any type checking errors were reported.\r\n\r\n#### options.noImplicitAny\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noImplicitAny` option for `tsc` command.\r\n\r\nWarn on expressions and declarations with an implied 'any' type.\r\n\r\n#### options.noResolve\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noResolve` option for `tsc` command.\r\n\r\n#### options.preserveConstEnums\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--preserveConstEnums` option for `tsc` command.\r\n\r\nDo not erase const enum declarations in generated code.\r\n\r\n#### options.removeComments\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--removeComments` option for `tsc` command.\r\n\r\nDo not emit comments to output.\r\n\r\n#### options.allowJs\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowJs` option for `tsc` command. (at least version 1.8)\r\n\r\n#### options.allowUnreachableCode\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowUnusedLabels` option for `tsc` command. (at least version 1.8)\r\n\r\nAllows unreachable code.\r\n\r\n#### options.allowUnusedLabels\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowUnusedLabels` option for `tsc` command. (at least version 1.8)\r\n\r\nAllows specify unused labels in the source code.\r\n\r\n#### options.noImplicitReturns\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noImplicitReturns` option for `tsc` command. (at least version 1.8)\r\n\r\nDisallow implicit returns from the functions.\r\n\r\n#### options.noFallthroughCasesInSwitch\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noFallthroughCasesInSwitch` option for `tsc` command. (at least version 1.8)\r\n\r\nDisallow fallthrough cases in switch statement.\r\n\r\n#### options.allowSyntheticDefaultImports\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--allowSyntheticDefaultImports` option for `tsc` command. (at least version 1.8)\r\n\r\nIndicates that the module loader performs some kind of synthetic default import member creation not indicated in the imported .ts or .d.ts.\r\n\r\n#### options.jsx\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--jsx` option for `tsc` command. (at least version 1.6)\r\n\r\nSupport for React.\r\n\r\n#### options.reactNamespace\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--reactNamespace` option for `tsc` command. (at least version 1.6)\r\n\r\nAllow specify namespace name for JSX factory.\r\n\r\n#### options.sourceMap\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--sourcemap` option for `tsc` command. Alternatively you could use `sourcemap` parameter for backward compatibilty, that parameter would be removed in some future releases.\r\n\r\nGenerated `.js.map` file is also piped into the stream.\r\n\r\n**Notice**: If your output files are NOT going to `{working directory}/something/` (to a directory beneath the working directory), you have to tell your output path to gulp-tsc by `outDir` option or `sourceRoot` option. See [Path modification](#path-modification) for details.\r\n\r\n#### options.suppressImplicitAnyIndexErrors\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--suppressImplicitAnyIndexErrors` option for `tsc` command. (Starting from TSC version 1.5)\r\n\r\nSuppress noImplicitAny errors for indexing objects lacking index signatures.\r\n\r\n#### options.reactNamespace\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--reactNamespace` option for `tsc` command. (at least version 1.8)\r\n\r\nDisallow fallthrough cases in switch statement.\r\n\r\n#### options.tmpDir\r\nType: `String`\r\nDefault: `''` (current working directory)\r\n\r\nA path relative to current working directory, where a temporary build folder will be put in.\r\n\r\n**Notice**: If you use this option with sourcemaps, consider to specify `outDir` or `sourceRoot`. See [options.sourceMap](#optionssourcemap) for details.\r\n\r\nIf you are watching some files in current working directory with gulp.watch(), the creation of temporary build folder will trigger a folder change event.\r\n\r\nIf this is unexpected, you can put temp folders in a non-watched directory with this option.\r\n\r\nExample:\r\n```\r\ngulp.task('tsc', function() {\r\n  return gulp.src(src.ts)\r\n        .pipe(tsc({tmpDir:'.tmp'}))\r\n        .pipe(gulp.dest('.tmp/js'));\r\n});\r\n```\r\n\r\nThis will put a temporary folder in '.tmp'.\r\n\r\nSee [Temporary directory and file by gulp-tsc](#temporary-directory-and-file-by-gulp-tsc) for details.\r\n\r\n#### options.noLib\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--noLib` option for `tsc` command.\r\n\r\nSet `noLib` to `true` will dramatically reduce compile time, because 'tsc' will ignore builtin declarations like 'lib.d.ts'.\r\n\r\nSo if you are not using 'lib.d.ts' or prefer speed, set this to `true`. (In my case `noLib:true` only takes 25% time compared to `noLib:false`)\r\n\r\n#### options.keepTree\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nIf set to false, gulp-tsc skips creating a temporary file in your source directory which is used for keeping source directory structure in output.\r\n\r\nSee [Temporary directory and file by gulp-tsc](#temporary-directory-and-file-by-gulp-tsc) for details.\r\n\r\n#### options.pathFilter\r\nType: `Object`, `Function`\r\nDefault: `null`\r\n\r\nThis option is used for modifying paths of compiled files.\r\n\r\nYou can pass a Hash-like object which is a mapping of output paths in relative form.\r\n\r\nExample:\r\n```\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.ts'])\r\n    .pipe(typescript({\r\n      pathFilter: { 'aaa/bbb': 'xxx/yyy' }\r\n    }))\r\n    .pipe(gulp.dest('build/'))\r\n});\r\n```\r\n\r\nThe example above will compile `src/aaa/bbb/ccc.ts` into `build/xxx/yyy/ccc.js`.\r\n\r\nYou can also pass a function which takes a relative path of compiled files as an argument and returns a modified path.\r\n\r\nExample:\r\n```\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.ts'])\r\n    .pipe(typescript({\r\n      pathFilter: function (path) { return path.replace(/^aaa\\/bbb/, 'xxx/yyy') }\r\n    }))\r\n    .pipe(gulp.dest('build/'))\r\n});\r\n```\r\n\r\nA path filter function will receive following two arguments:\r\n\r\n- `String`: A relative path to a compiled file.\r\n- `vinyl.File`: A [vinyl.File](https://github.com/wearefractal/vinyl) object of a compiled file.\r\n\r\nA path filter function can return `Boolean`, `String`, `vinyl.File` or `undefined`.\r\n\r\n| Returned value      | Effect |\r\n| ------------------- | ------ |\r\n| `true`, `undefined` | Use the file as-is. |\r\n| `false`             | Skip the file. (not piped into output gulp stream) |\r\n| `String`            | Replace the file's path with the returned string. |\r\n| `vinyl.File`        | Use the returned vinyl.File instead. |\r\n\r\n#### options.safe\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nBy default, gulp-tsc ignores warnings from tsc command and emits compiled js files to the gulp stream anyway.\r\n\r\nIf set this option to true, gulp-tsc never emits compiled files when tsc command returned warnings or errors.\r\n\r\n#### options.emitDecoratorMetadata\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--emitDecoratorMetadata` option for `tsc` command.\r\n\r\nEmit decorator metadata.\r\n\r\n\r\n#### options.experimentalDecorators\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`--experimentalDecorators` option for `tsc` command.\r\n\r\nEnable experimental Decorator support. (Starting from TSC version 1.5)\r\n\r\n\r\n#### options.jsx\r\nType: `String`\r\nDefault: `null`\r\n\r\n`--jsx` option for `tsc` command.\r\n\r\nEnable React support. (Starting from TSC version 1.6)\r\n\r\n#### options.additionalTscParameters\r\nType: Array of string\r\nDefault: []\r\n\r\nThis option is used to pass any parameter to tsc command. Especially it can be used to pass parameters not yet suported by gulp-tsc. You have to pass each parameter separately.\r\n\r\nExample:\r\n```\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.tsx'])\r\n    .pipe(typescript({\r\n      additionalTscParameters: ['--jsx', 'react']\r\n    }))\r\n    .pipe(gulp.dest('build/'))\r\n});\r\n```\r\n\r\n## Error handling\r\n\r\nIf gulp-tsc fails to compile files, it emits `error` event with `gutil.PluginError` as the manner of gulp plugins.\r\n\r\nThis causes gulp to stop running on TypeScript compile errors, which is sometimes a problem like using with `gulp.watch()`.\r\n\r\nIf you want to suppress the error, just pass `{ emitError: false }` to gulp-tsc like below.\r\n\r\n```\r\nvar typescript = require('gulp-tsc');\r\n\r\ngulp.task('default', function () {\r\n    gulp.watch('src/**/*.ts', ['compile'])\r\n});\r\n\r\ngulp.task('compile', function () {\r\n    return gulp.src('src/**/*.ts')\r\n        .pipe(typescript({ emitError: false }))\r\n        .pipe(gulp.dest('dest/'));\r\n});\r\n```\r\n\r\n## Path modification\r\n\r\ngulp-tsc does some modification to output files to correct relative paths in sourcemap files (.js.map) and declaration files (.d.ts).\r\n\r\nHowever, gulp-tsc doesn't know where your output files are going to be stored finally since it is specified by `gulp.dest` and gulp-tsc cannot access to it. So gulp-tsc assumes that your output files go into `{working directory}/something/` by default.\r\n\r\nIf your output files are not going there, you have to tell your output path to gulp-tsc by `outDir` option.\r\n\r\nIf you have a gulp task like this:\r\n\r\n```\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.ts'])\r\n    .pipe(typescript({ sourceMap: true, declaration: true }))\r\n    .pipe(gulp.dest('foo/bar/'))\r\n});\r\n```\r\n\r\nOutput files are going under `{working directory}/foo/bar/`, but sourcemap files and declaration files will contain a relative path to source files from `{working directory}/foo/` which is not correct.\r\n\r\nTo fix the relative path, just specify `outDir` same as your `gulp.dest` path.\r\n\r\n```\r\ngulp.task('compile', function(){\r\n  gulp.src(['src/**/*.ts'])\r\n    .pipe(typescript({ sourceMap: true, declaration: true, outDir: 'foo/bar/' }))\r\n    .pipe(gulp.dest('foo/bar/'))\r\n});\r\n```\r\n\r\n## Temporary directory and file by gulp-tsc\r\n\r\nSince gulp-tsc uses `tsc` command internally for compiling TypeScript files, compiled JavaScript files require to be written on the file system temporarily.\r\n\r\nFor those compiled files, gulp-tsc creates a temporary directory named `gulp-tsc-tmp-*` in the current working directory. You can change the location of the temporary directory by [options.tmpDir](#optionstmpdir).\r\n\r\nIn addition, gulp-tsc also creates a temporary file named `.gulp-tsc-tmp-*.ts` in your source root directory while compiling. The source root is determined by your `gulp.src()`. (e.g. For `gulp.src(\"src/**/*.ts\")`, the source root is `src/`)\r\n\r\nThis is required for keeping your source directory structure in output since tsc command omits the common part of your output paths.\r\n\r\nIf you do not need to keep the structure, you can skip creating the temporary file by setting [options.keepTree](#optionskeeptree) to false.\r\n\r\n\r\n[npm-url]: https://npmjs.org/package/gulp-tsc\r\n[npm-image]: https://badge.fury.io/js/gulp-tsc.png\r\n[travis-url]: https://travis-ci.org/kant2002/gulp-tsc\r\n[travis-image]: https://travis-ci.org/kant2002/gulp-tsc.png?branch=master\r\n[daviddm-url]: https://david-dm.org/kant2002/gulp-tsc\r\n[daviddm-image]: https://david-dm.org/kant2002/gulp-tsc.png?theme=shields.io\r\n",
  "readmeFilename": "README.md",
  "_id": "gulp-tsc@1.1.5",
  "dist": {
    "shasum": "834a00123867801903c8509a133e49e0021df1e3"
  },
  "_from": "gulp-tsc@",
  "_resolved": "https://registry.npmjs.org/gulp-tsc/-/gulp-tsc-1.1.5.tgz"
}
